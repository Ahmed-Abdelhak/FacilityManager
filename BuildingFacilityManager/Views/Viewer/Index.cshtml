@model BuildingFacilityManager.ViewModels.BuildingViewerViewModel
@using System.Web.Script.Serialization
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization

@{
    ViewBag.Title = "Building Viewer";
}


@{


    var assetsList = JsonConvert.SerializeObject(@Model.Assets,
        Formatting.Indented,
        new JsonSerializerSettings()
        {
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            ContractResolver = new CamelCasePropertyNamesContractResolver()
        });


    var storiesList = JsonConvert.SerializeObject(@Model.Stories,
        Formatting.Indented,
        new JsonSerializerSettings()
        {
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            ContractResolver = new CamelCasePropertyNamesContractResolver()
        });

    var spacesList = JsonConvert.SerializeObject(@Model.Spaces,
        Formatting.Indented,
        new JsonSerializerSettings()
        {
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            ContractResolver = new CamelCasePropertyNamesContractResolver()
        });


}
<div style="margin-left: -190px" id="webgl"></div>


@section scripts{
    <script src="../../Scripts/ThreeJs/Libraries/three.js"></script>
    <script type="module" src="../../Scripts/ThreeJs/main.js"></script>
    <script src="../../Scripts/ThreeJS/Classes/Helper.js"></script>
    <script src="../../Scripts/ThreeJS/Classes/Storey.js"></script>
    <script src="../../Scripts/ThreeJS/Classes/Space.js"></script>
    <script src="../../Scripts/ThreeJs/Libraries/OBJLoader.js"></script>
    <script src="../../Scripts/ThreeJs/Libraries/dat.gui.min.js"></script>
    <script src="../../Scripts/ThreeJs/Libraries/threex.domevents.js"></script>
    <script src="../../Scripts/ThreeJs/Libraries/threex.linkify.js"></script>
    <script src="../../Scripts/ThreeJs/Libraries/OrbitControls.js"></script>
    <script src="//unpkg.com/three-spritetext" asp-append-version="true"></script>

    <script>


        function init() {
            //Scene

            var scene = new THREE.Scene(); //creating the scene object




            //Camera
            var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.x = -100;
            camera.position.y = 50;
            camera.position.z = -100;
            camera.lookAt(new THREE.Vector3(0, 0, 0)); //lookat could take scene and position



            //grid
            var size = 200;
            var divisions = 100;
            var gridHelper = new THREE.GridHelper(size, divisions);
           // scene.add(gridHelper);

            ////Axes
            //let lineMaterial = new THREE.MeshBasicMaterial({
            //    color: '#FFFFFF',
            //    side: THREE.DoubleSide
            //});
            //let geometryLine1 = new THREE.Geometry();
            //geometryLine1.vertices.push(new THREE.Vector3(0,0,0));
            //geometryLine1.vertices.push(new THREE.Vector3(50, 0, 0));
            //let line1 = new THREE.Line(geometryLine1, lineMaterial);


            //let geometryLine2 = new THREE.Geometry();
            //geometryLine2.vertices.push(new THREE.Vector3(0,0,0));
            //geometryLine2.vertices.push(new THREE.Vector3(0, 0, 1));
            //let line2 = new THREE.Line(geometryLine2, lineMaterial);


            //let text1 = new SpriteText("X");
            //text1.position.x = 50;
            //text1.position.y = 0;
            //text1.position.z = 0;
            //text1.textHeight = 0.1;
            //text1.color = '#212F3C';
            //scene.add(text1);


            //Renderer

            var renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor('rgb (250, 250, 250)');
            document.getElementById('webgl').appendChild(renderer.domElement);
          

            //Controls Orbit Control

            var controls = new THREE.OrbitControls(camera, renderer.domElement); //use the camera and the renderer as args and the nwe will pass this  var  in the update
            controls.enableKeys = true; //enabling keyboard
            controls.enableZoom = true; //enabling zoom by mouse

            scene.background = new THREE.Color(0xaaaaaa);

 
            //Calling the functions
            update(renderer, scene, camera, controls); //calling the function with the same arguments and the renderer object

            return scene;
        }


        //Update Funtion

        function  update(renderer, scene, camera, controls) {
            renderer.render(scene,camera);
            controls.update(); //calling the update method on the controls object
            requestAnimationFrame(function() {update(renderer, scene, camera, controls);})  //using the same argumentswith a call back function and this will be the update functon  (being called bac)
        }


        let scene = init();


        Stories = @Html.Raw(@storiesList);

        for(let i=0;i<Stories.length;i++)
        {
            let s = new Storey(Stories[i].width, Stories[i].length, Stories[i].level, Stories[i].id, Stories[i].label)
            let mesh= s.create();
            scene.add(mesh);
        }


        let Spaces = @Html.Raw(@spacesList);


        for (let i = 0; i < Spaces.length; i++) {


            let s = new Space(Spaces[i].width, Spaces[i].length, Spaces[i].wallsHeight, Spaces[i].positionX, Spaces[i].positionY, Spaces[i].storeyId, Spaces[i].id, Spaces[i].label, Stories);
            let mesh = s.create();

            scene.add(mesh);
        }



    </script>


}
